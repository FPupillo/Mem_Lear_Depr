#------------------------------------------------------------------------------#
# Script that creates the list of the objects 
# created By Francesco Pupillo
# date = "Tue Mar  1 19:36:54 2022"
#------------------------------------------------------------------------------#

rm(list=ls())

# load packages
library("readxl")
library(gtools)
library(dplyr)
library(lme4)
library(lmerTest)
library(car)
library(abind)

# source functions
source("helper_functions/shuffle_corr_ans.R")
source("helper_functions/shuffle.R")
source("helper_functions/getCons.R")

# retrieve the file with info of the categories
category<-read_excel("SI1.xlsx", sheet = "Sheet2")

# change fourth and fifth names to get the hyphen
names(category)[4:5]<-c("modal_categ", "cat_agreement")

# select the categories
selCat<-c( "Outdoor activity & sport item", "Kitchen & utensil",
           "Electronic device & accessory", "Hand labour tool & accessory")

# set the reward probabilities for the contingencies
highC<-0.75    # 75 for high feedback
lowC<-(1-highC)/3

categ<-selCat

# Since the categories needs to appear randomly on the sceen,
# we can consider all the possible permutations of category and position
# We  then need 4 factorial (4*3*2*1) =24
categPermut<-permutations(n=4,r=4,v=categ,repeats.allowed=F)

# convert to dataframe
categPermut<-data.frame(categPermut)

# we need 3 lists with different character-cateogry contingencies
# create three lists by randomly selecting 20 trials (without replacement)
# for each list
set.seed(5845698)

for (block in 1:2){

for (l in 1:3){
  # sample the categories
  temp<-dplyr::sample_n(categPermut, 20, replace = F) 
  # assign the names
  names(temp)<-c("left_categ", "centleft_categ", "centright_categ", "right_categ")
  # assign the temporary dataframe to the object
  assign(paste0("tasklist", block, LETTERS[l]), temp )
  # delete it
  rm(temp)
}
}

# create an array for the contingencies
contingencies<-array(numeric(), c(1, 4, 0)) # creating an empty arrray of 2 columns, 3 rows, and nothing on it

# create the first list
# creating the contingencies for first list, by appending this matrix
contingencies1<-abind(contingencies, matrix(c(highC, lowC, lowC, lowC),
                                           # this means that the first category (outdoor activity) is the one with the high feedback
                                           nrow =1, ncol=4, byrow=T), along =3)

# append now the contingencies after the first change point
contingencies1<-abind(contingencies1, matrix(c(lowC, highC, lowC, lowC),
                                           nrow =1, ncol=4, byrow=T), along =3)

# append now the contingencies after the second change point
contingencies1<-abind(contingencies1, matrix(c(lowC, lowC, highC, lowC),
                                           nrow =1, ncol=4, byrow=T), along =3)

contingencies2<-abind(contingencies, matrix(c(lowC, lowC, highC, lowC),
  # this means that the first category (outdoor activity) is the one with the high feedback
                                           nrow =1, ncol=4, byrow=T), along =3)

# append now the contingencies after the first change point
contingencies2<-abind(contingencies2, matrix(c(highC, lowC, lowC, lowC),
                                           nrow =1, ncol=4, byrow=T), along =3)

# append now the contingencies after the second change point
contingencies2<-abind(contingencies2, matrix(c(lowC, highC, lowC, lowC),
                                           nrow =1, ncol=4, byrow=T), along =3)
                                           
set.seed(5845698)

# create a loop for creating the lists
for (block in 1:2){


for (h in 1:dim(contingencies1)[3]){ # loop through the third dimension of the 

  # get the currlist
  currlist<-get(paste0("tasklist", block, LETTERS[h]))
  
  contingencies<-get(paste0("contingencies", block))
  # sample correct answer
  corr_ans<-sample(selCat,nrow(currlist), prob = contingencies[1,,h],
                    replace = T)
  
  # make sure that the contingencies are balanced
  corr_ans<-shuffle_corr_ans(corr_ans, num = length(corr_ans),
                              probab = contingencies[1,,h], 
                              Pcong = highC, Pincong = 0.10, leaveout=4 )
  
  # we need a variable indicating the trial condition (high vs low reward or 
  # punishment)
  # get the flower that represents the highest contingency
  highcont<-which(contingencies[1,,h]==highC)
  
  # 1 is high and 0 is low
  type<-as.numeric(corr_ans==selCat[highcont])
  
  # now we have to indicate the key participants need to press in order to get the right response
  # corr_ans variable that will be used in the list file
  corr_resp<-vector()
  for (j in 1: length(corr_ans)){
    corr_resp[j]<- which(currlist[j,]==corr_ans[j])
  }

  # add it to the dataframe
  currlist$corr_resp<- corr_resp
  currlist$type<-type  

  # shuffle the trials
 currlist<-shuffle(currlist)
 
 # scheck that the list meets the criteria otherwise reshuffle 
 assign(paste0("tasklist", block, LETTERS[h]), 
        shuffle_corr_ans_dataframe(dataframe =currlist,
                                   Pcong = highC, Pincong = 0.10, 
                                   leaveout = "Hand labour tool & accessory"))
} 


}
#------------------------------------------------------------------------------#
# now select the images
#------------------------------------------------------------------------------#

dataSel<-category[category$modal_categ %in% selCat, ]

# images that were repeated
imagestodelete<-c("djmixer01","cleaver02","fork07b","jar03","mug05", "pot02a", "strainer02", "muffintray02",
                  "sandpaper", "paintscraper", "musicalwoodenspoons","icescraper","hosenozzle", "carbattery",
                  "bagtie", "backfloat" )

dataSel<-dataSel[!dataSel$Filename %in% imagestodelete, ]

# how many objects remaining?
# get the number of objects per category
table<-dataSel %>% 
  group_by(modal_categ) %>% 
  tally()

# we need to split among task objects, new objects for recognition, and fillers
set.seed(5588422)
process<-function(){
  for (cat in 1:length(selCat)){
    # subset the database
    datatask<- dataSel[dataSel$modal_categ==selCat[cat],]
    
    # size for all the category but the last one is 38
    if (cat==4){
      size = 6
    } else{
      size = 38
    }
    
    # select object encoding (day2)
    datatasksel<-datatask[sample(nrow(datatask), size = size, replace =F),] 
    
    # assign to a dataset
    assign(paste(selCat[cat],"_encoding",sep=""), datatasksel)
    
    # delete those objects
    datatask<-datatask[!datatask$Filename %in% datatasksel$Filename,]
    
    # now the recognition (new objects)
    datarec<-datatask[sample(nrow(datatask), size = size, replace =F),]
    
    # assign to a dataset
    assign(paste(selCat[cat],"_rec",sep=""), datarec)
    
    # delete those objects
    datatask<-datatask[!datatask$Filename %in% datarec$Filename,]
    
  }
  
  # merget the dataset to create the three task, rec, and fillers
  
  data_encoding<-rbind(`Hand labour tool & accessory_encoding`, 
                       `Kitchen & utensil_encoding`, 
                       `Outdoor activity & sport item_encoding`, 
                       `Electronic device & accessory_encoding`)
  data_rec<-rbind(`Hand labour tool & accessory_rec`, 
                  `Kitchen & utensil_rec`, 
                  `Outdoor activity & sport item_rec`,
                  `Electronic device & accessory_rec`)
  
  return(list("data_encoding"=data_encoding, "data_rec"=data_rec))
}

# check whether there is any significant difference among the categories in category agreement
dataall<-process()
dataall$data_encoding %>%
  group_by(modal_categ) %>%
  summarize(mean= mean(cat_agreement))

checktask<-lm(cat_agreement~modal_categ, data  = dataall$data_encoding )
a<-Anova(checktask)

checkrec<-lm(cat_agreement~modal_categ, data = dataall$data_rec)
b<-Anova(checkrec)


# loop until there is no significant difference
while(any(c(a[1,4], b[1, 4])<0.10 )){
  dataall<-process()
  checktask<-lm(cat_agreement~modal_categ, data = dataall$data_encoding )
  a<-Anova(checktask)
  
  checkrec<-lm(cat_agreement~modal_categ, data = dataall$data_rec)
  b<-Anova(checkrec)
  
}

# check if there are repeated images
for (l in 1:length(dataall)){
  images<-dataall[[l]]$Filename
  # exclude words that have 0 in them
  imagesNum<-images[grep('0', images)]
  # delete from the images
  images<-images[!images %in% imagesNum]
  
  # delete the double
  # first mark the one that are doubled
  imagesdoubled<-vector()
  counter<-1
  for (i in 1:length(images)){
    times<-length(images[images==images[i]])
    if ((times)>1){
      for (t in 1:(times-1)){
        imagesdoubled[counter]<-ImagSelect$Filename[ImagSelect$Modal.name==modalname[i]][t]
        counter<-counter+1
      }
    }
  }
  
  sort(imagesNum)
}

imagesdoubled

#------------------------------------------------------------------------------#
# assign objects to lists
#------------------------------------------------------------------------------#

# let's start from encoding
objects_enc<-dataall$data_encoding

# get the names of the lists
lists<-vector()
count<-1
for (block in 1:2){
  for (l in (c("A", "B", "C"))){
    lists[count]<-paste0("tasklist", block, l)
    count <-count+1
  }
}


set.seed(58874146)

  objects<-objects_enc
  
  # loop for each list
  for (l in 1:length(lists)){
    
    # take the list previously created
    currlist<-assign(lists[l],as.data.frame(eval(parse(text = lists[l]))))
    
    # create a variable indicating the category
    for (n in 1:nrow(currlist)){
 
      # subset the data keeping only the ones with the same object cateogory
      currobjects<-objects[objects$modal_categ==currlist$corrans[n],]
      # sample one of them
      objectsel<-sample(currobjects$Filename[currobjects$modal_categ==currlist$corrans[n]], 1)
      # assign to the data
      currlist$image[n]<-paste("stimuli/objects/",objectsel, ".jpg", sep="")
      # delete that object from the objectPract
      objects<-objects[objects$Filename!=objectsel,]
    }
    
    
    # convert the categories into images
    categories<-c("left_categ", "centleft_categ", "centright_categ", "right_categ")
    for (c in 1:length(categories)){
      currlist[[categories[c]]]<-as.character(currlist[[categories[c]]])
    }
    
    for (n in 1:nrow(currlist)){
      for (c in 1:length(categories)){
        currlist[n, categories[c]]<-paste("stimuli/", as.character(currlist[n, categories[c]]), ".png", sep="")
      }
    }
    
    # assign the current list to the data
    assign(lists[l], currlist)
    
    # print the list
    write.table(as.data.frame(eval(parse(text =lists[l]))), 
                paste0("lists/", lists[l] ,".csv"),
                col.names = T,row.names = F, quote=F, sep=",")
    
    
  }

  #------------------------------------------------------------------------------#
  # recognition
  #------------------------------------------------------------------------------#
  
  # check if the new images are equally distributed among categories
  dataall$data_rec %>%
    group_by(modal_categ) %>%
    tally()
  
  # old images
  imagesforRecog<-get("objects_enc")
  # new images
  imagesforRecog<-c(imagesforRecog$Filename, dataall$data_rec$Filename)
  
  imagesforRecog<-paste0(imagesforRecog, ".jpg")
  
  # variable indicating left and right
  corr_ans<-c(rep("left", times=120), rep("right", times=120))
  # varable indicating old and new
  type<-c(rep("old", times=144), rep("new", times=144))
  
  imagesforRecog<-data.frame(cbind(imagesforRecog, corr_ans, type))
  names(imagesforRecog)<-c("images", "corr_ans", "type")
  # shuffle
  set.seed(8521458)
  
  
  }
